【参考地址】
    https://www.cnblogs.com/xiong2ge/p/hystrix_faststudy.html,
    https://www.cnblogs.com/knowledgesea/p/11208023.html

【Hystrix架构图】https://img2018.cnblogs.com/blog/636325/201809/636325-20180929175732150-1938172824.jpg

【Hytrix的目标】
    Hystrix的目标就是能够在1个或多个依赖出现问题时，系统依然可以稳定的运行，其手段包括隔离、限流和降级等。
    系统高可用手段除了以上的限流、隔离和降级，还有负载均衡、超时与重试、回滚、压测与预案，共7种手段。
【熔断器-Hytrix】
    熔断器模式源于Martin Fowler的Circuit Breaker一文。“熔断器”本身是一种开关装置，用于在电路上保护线路过载，
    当线路中有电器发生短路时，“熔断器”能够及时的切断故障电路，防止发生过载、发热、甚至起火等严重后果。

    熔断器设计中有三种状态，生生世世，循环往复。
    (1)closed（关闭状态，流量可以正常进入）
    (2)open（即熔断状态，一旦错误达到阈值，熔断器将打开，拒绝所有流量）
    (3)half-open(半开状态，open状态持续一段时间后将自动进入该状态，重新接收流量，
        一旦请求失败，重新进入open状态，
        但如果成功数量达到阈值，将进入closed状态)

    (1)CLOSED关闭状态：允许流量通过。
    (2)OPEN打开状态：不允许流量通过，即处于降级状态，走降级逻辑。
    (3)HALF_OPEN半开状态：允许某些流量通过，并关注这些流量的结果，
        如果出现超时、异常等情况，将进入OPEN状态，如果成功，那么将进入CLOSED状态。

    在分布式架构中，熔断器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，
    通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。
    这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。

【Hystrix基础应用】
    Hystrix基础应用比较简单，包括直接编码和使用注解等两种方式，一般选用注解方式，其基于javanica子包，
    hystrix-javanica官网，之后简要展示Hystrix如何在基于gradle依赖管理的Springboot应用中集成。
【】
【】
【】
【】
【】

