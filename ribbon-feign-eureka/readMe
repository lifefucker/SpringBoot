https://www.cnblogs.com/knowledgesea/p/11231617.html

Ribbon 是一个客户端负载均衡器（Nginx 为服务端负载均衡），它赋予了应用一些支配 HTTP 与 TCP 行为的能力，
可以得知，这里的客户端负载均衡也是进程内负载均衡的一种。
它在 Spring Cloud 生态内是一个不可缺少的组件，少了它，服务便不能横向扩展，这显然是有违云原生12要素的。
此外 Feign 与 Zuul 中已经默认集成了 Ribbon，在我们的服务之间凡是涉及调用的，都可以集成它并应用，从而使我们的调用链具备良好的伸缩性。

Feign已经默认使用了Ribbon:
(1)负载均衡
(2)容错
(3)多协议（HTTP，TCP，UDP）支持异步和反应模型
(4)缓存和批处理

【Ribbon的负载均衡策略】
(1)RandomRule （随机策略）：
    随机选择 Server
(2)RoundRobinRule （轮训策略）：
    按顺序循环选择 Server
(3)RetryRule （重试策略）：
    在一个配置时问段内当选择 Server 不成功，
    则一直尝试选择一个可用的 Server
(4)BestAvailableRule （最低并发策略）：
    逐个考察 Server，
    如果 Server 断路器打开，则忽略，
    再选择其中并发连接最低的 Server
(5)AvailabilityFilteringRule （可用过滤策略）：
    过滤掉一直连接失败并被标记为 circuit tripped 的 Server，
    过滤掉那些高并发连接的 Server（active connections 超过配置的网值）
(6)ResponseTimeWeightedRule （响应时间加权策略）：
    根据 Server 的响应时间分配权重。
    响应时间越长，权重越低，被选择到的概率就越低；
    响应时间越短，权重越高，被选择到的概率就越高。
    这个策略很贴切，综合了各种因素，如：网络、磁盘、IO等，
    这些因素直接影响着响应时间
(7)ZoneAvoidanceRule （区域权衡策略）：
    综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，
    并且判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server





